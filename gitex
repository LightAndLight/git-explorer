#! /usr/bin/env -S ipso --

indexed : Array a -> Array { index : Int, value : a }
indexed input =
  array.generate
    (array.length input)
    (\index -> { index = index, value = array.get! index input})

hasHelp : Array String -> Bool
hasHelp args =
  case array.find (\item -> item == "--help" || item == "-h") args of
    Some _ -> true
    None () -> false

printHelp : IO ()
printHelp =
  comp
    bind program <- env.program
    println "USAGE: $program COMMAND ARGS"
    println ""
    println "Commands:"
    println "  type  Get the type of a Git object"
    println "  show  Print the contents of a Git object"
    println "  uri   Calculate Git URIs for a file or directory"
    println ""
    println "Options:"
    println "  -h, --help  Print help information"

printTypeHelp : IO ()
printTypeHelp =
  comp
    bind program <- env.program
    println "USAGE: $program type URI"
    println ""
    println "Get the type of a Git object"
    println ""
    println "Options:"
    println "  -h, --help  Print help information"

printShowHelp : IO ()
printShowHelp =
  comp
    bind program <- env.program
    println "USAGE: $program show URI"
    println ""
    println "Print the contents of a Git object"
    println ""
    println "Options:"
    println "  -h, --help  Print help information"

printUriHelp : IO ()
printUriHelp =
  comp
    bind program <- env.program
    println "USAGE: $program uri PATH"
    println ""
    println "Calculate Git URIs for a file or directory"
    println ""
    println "Options:"
    println "  -h, --help  Print help information"


parseArgs :
  Array String ->
  (|
    Help : IO (),
    Show : String,
    Type : String,
    Uri : String,
    Error : { message : String, help : IO () }
  |)
parseArgs args =
  # case args of
  #   https://github.com/LightAndLight/ipso/issues/82
  #   https://github.com/LightAndLight/ipso/issues/354
  #   ["show", ..rest] ->
  #     case rest of
  #       [argument] ->
  #         Show argument
  #       _ ->
  #         Error "the \"show\" command takes exactly 1 argument"
  #   ["type", ..rest] ->
  #     case rest of
  #       [argument] ->
  #         Show argument
  #       _ ->
  #         Error "the \"type\" command takes exactly 1 argument"
  #   [command, ..rest] ->
  #     Error "invalid command: $command"
  #   _ ->
  #     Error "invalid usage"
  let argsLength = array.length args in
  if argsLength >= 1
  then
    case array.get! 0 args of
      "show" ->
        if hasHelp args then Help printShowHelp else
        if argsLength == 2
          then Show (array.get! 1 args)
          else Error { message = "the \"show\" command takes exactly 1 argument", help = printShowHelp }
      "type" ->
        if hasHelp args then Help printTypeHelp else
        if argsLength == 2
          then Type (array.get! 1 args)
          else Error { message = "the \"type\" command takes exactly 1 argument", help = printTypeHelp }
      "uri" ->
        if hasHelp args then Help printUriHelp else
        if argsLength == 2
          then Uri (array.get! 1 args)
          else Error { message = "the \"uri\" command takes exactly 1 argument", help = printUriHelp }
      command ->
        if hasHelp args
          then Help printHelp
          else Error { message = "invalid command \"$command\"", help = printHelp }
  else
    Error { message = "invalid usage", help = printHelp }

parseUri : 
  String -> 
  (| 
    Object : { hash : String },
    Blob : { hash : String },
    Commit : { 
      hash : String,
      path : (|
        None : (),
        Tree : Array String,
        Parent : Array String
      |)
    },
    Tree : { hash : String },
    Error : String
  |)
parseUri input =
  let splitted = string.split ":" input in
  # case splitted of
  #   https://github.com/LightAndLight/ipso/issues/82
  #   https://github.com/LightAndLight/ipso/issues/354
  #   ["git", objectType, ..rest] ->
  #     case objectType of
  #       "object" ->
  #         Object { hash = string.join ":" rest }
  #       "blob" ->
  #         Blob { hash = string.join ":" rest }
  #       "commit" ->
  #         case string.split "/" <| string.join ":" rest of
  #           [hash, ..rest] ->
  #             case rest of
  #               ["tree", ..rest] ->
  #                 https://github.com/LightAndLight/ipso/issues/320
  #                 Commit { hash, path = Tree rest }
  #               ["parent", ..rest] ->
  #                 Commit { hash, path = Parent rest }
  #               _ ->
  #                 Error "invalid Git URI: $input"
  #           _ ->
  #             Error "invalid Git URI: $input"
  #       "tree" ->
  #       _ ->
  #         Error "invalid Git URI: $input"
  #   _ ->
  #     Error "invalid Git URI: $input"
  let splittedLength = array.length splitted in
  if splittedLength < 3
  then Error "invalid Git URI: $input"
  else
    case array.get! 0 splitted of
      "git" -> 
        let makePath = \xs -> string.join ":" <| array.slice 2 (splittedLength - 2) xs in
        case array.get! 1 splitted of
          "object" -> 
            Object { hash = makePath splitted }
          "blob" ->
            Blob { hash = makePath splitted }
          "commit" ->
            let splittedPath = string.split "/" <| makePath splitted in
            case array.length splittedPath of
              0 ->
                Error "invalid Git URI: $input"
              1 ->
                Commit { hash = array.get! 0 splittedPath, path = None () }
              _ ->
                # https://github.com/LightAndLight/ipso/issues/82
                let hash = array.get! 0 splittedPath in
                let item = array.get! 1 splittedPath in
                let rest = array.slice 2 (array.length splittedPath - 2) splittedPath in
                case item of
                  "tree" ->
                    Commit { hash = hash, path = Tree rest }
                  "parent" ->
                    Commit { hash = hash, path = Parent rest }
                  _ ->
                    Error "invalid Git URI: $input"
          "tree" ->
            Tree { hash = makePath splitted }
          _ ->
            Error "invalid Git URI: $input"
      _ ->
        Error "invalid Git URI: $input"

readObjectType : String -> IO String
readObjectType hash = io.map string.trim <| cmd.read `git cat-file -t $hash` 

checkObjectType : String -> String -> IO (| Correct : (), Incorrect : String |)
checkObjectType hash expectedType =
  comp
    bind actualType <- readObjectType hash
    if expectedType == actualType
      then io.pure (Correct ())
      else io.pure (Incorrect "git:object:$hash is a $actualType, not a $expectedType")

andThen : (| Error : a, r1 |) -> ((| r1 |) -> (| Error : a, r2 |)) -> (| Error : a, r2 |)
andThen e1 f =
  case e1 of
    Error err ->
      Error err
    rest ->
      f rest

parseCommitContent :
  String -> 
  (| Ok : { tree : String, parent : String }, Error : String |)
parseCommitContent input =
  let lines = string.partsc '\n' input in
  if array.length lines < 2
  then Error "expected at least 2 lines commit content"
  else
    andThen
      (case string.partsc ' ' <| array.get! 0 lines of
        [fieldName, hash] ->
          case fieldName of
            "tree" ->
              Ok hash
            _ ->
              Error "commit content: line 1: expected format: tree {hash}"
        _ ->
          Error "commit content: line 1: expected format: tree {hash}"
      )
      (\(Ok tree) ->
        andThen
          (case string.partsc ' ' <| array.get! 1 lines of
            [fieldName, hash] ->
              case fieldName of
                "parent" ->
                  Ok hash
                _ ->
                  Error "commit content: line 2: expected format: parent {hash}"
            _ ->
              Error "commit content: line 2: expected format: parent {hash}"
          )
          (\(Ok parent) -> 
            Ok { tree = tree, parent = parent }
          )
      )

parseTreeContent :
  String ->
  Array (|
    Ok : { 
      mode : String,
      objectType : String,
      hash : String,
      name : String
    },
    Error : String
  |)
parseTreeContent input =
  let lines = string.partsc '\n' input in
  array.map
    (\line ->
      case string.partsc '\t' line of
        [info, name] ->
          case string.partsc ' ' info of
            [mode, objectType, hash] ->
              Ok { mode = mode, objectType = objectType, hash = hash, name = name }
            _ ->
              Error "invalid tree format: expected format: {mode} {objectType} {hash}\t{name}"
        _ ->
          Error "invalid tree format: missing tab character"
    )
    lines

lookupTreeFile :
  String ->
  Array (|
    Ok : { 
      mode : String,
      objectType : String,
      hash : String,
      name : String
    },
    Error : String
  |) ->
  (|
    Found : { 
      mode : String,
      objectType : String,
      hash : String,
      name : String
    },
    Error : String,
    Missing : ()
  |)
lookupTreeFile name =
  array.foldl
    (\result entry ->
      case result of
        Missing () ->
          case entry of
            Ok entry ->
              if entry.name == name
                then Found entry
                else result
            Error err ->
              Error err
        _ ->
          result
    )
    (Missing ())

exitWithError : String -> IO a
exitWithError err =
  comp
    println "error: $err"
    exit.failure

main : IO ()
main =
  comp
    bind args <- env.args
    case parseArgs args of
      Help printFunction ->
        printFunction
      Show value -> 
        case parseUri value of
          Object { hash } -> 
            cmd.run `git cat-file -p $hash`
          Blob { hash } ->
            comp
              bind result <- checkObjectType hash "blob"
              case result of
                Correct () ->
                  cmd.run `git cat-file -p $hash`
                Incorrect err ->
                  exitWithError err
          Commit { hash, path } -> 
            comp
              bind result <- checkObjectType hash "commit"
              case result of
                Correct () ->
                  comp
                    bind commitContent <- cmd.read `git cat-file -p $hash`
                    case parseCommitContent commitContent of
                      Error err ->
                        exitWithError err
                      Ok { tree, parent } ->
                        case path of
                          None () -> cmd.run `git cat-file -p $hash`
                          Tree segments ->
                            comp
                              bind result <-
                                array.foldl
                                  (\getState segment ->
                                    comp
                                      bind state <- getState
                                      bind currentObjectType <- readObjectType state.hash
                                      if currentObjectType != "tree"
                                        then
                                          exitWithError "${state.name} is a $currentObjectType, not a tree"
                                        else
                                          comp
                                            bind treeContent <- cmd.read `git cat-file -p ${state.hash}`
                                            let entries = parseTreeContent treeContent
                                            case lookupTreeFile segment entries of
                                              Found entry ->
                                                io.pure { name = segment, hash = entry.hash }
                                              Error err ->
                                                exitWithError err
                                              Missing () ->
                                                exitWithError "$segment not found"
                                  )
                                  (io.pure { name = "tree", hash = tree })
                                  segments
                              cmd.run `git cat-file -p ${result.hash}`
                          Parent rest -> cmd.run `git cat-file -p $parent`
                Incorrect err ->
                  exitWithError err
          Tree { hash } -> 
            comp
              bind result <- checkObjectType hash "tree"
              case result of
                Correct () ->
                  cmd.run `git cat-file -p $hash`
                Incorrect err ->
                  exitWithError err
          Error err ->
            exitWithError err
      Type value ->
        case parseUri value of
          Object { hash } -> 
            comp
              bind objectType <- readObjectType hash
              println objectType
          Blob { hash } ->
            comp
              bind result <- checkObjectType hash "blob"
              case result of
                Correct () ->
                  println "blob"
                Incorrect err ->
                  exitWithError err
          Commit { hash, path } -> 
            comp
              bind result <- checkObjectType hash "commit"
              case result of
                Correct () ->
                  comp
                    bind commitContent <- cmd.read `git cat-file -p $hash`
                    case parseCommitContent commitContent of
                      Error err ->
                        exitWithError err
                      Ok { tree, parent } ->
                        case path of
                          None () ->
                            println "commit"
                          Tree rest -> 
                            comp
                              bind objectType <- readObjectType tree
                              println objectType
                          Parent rest ->
                            comp
                              bind objectType <- readObjectType parent
                              println objectType
                Incorrect err ->
                  exitWithError err
          Tree { hash } -> 
            comp
              bind result <- checkObjectType hash "tree"
              case result of
                Correct () ->
                  println "tree"
                Incorrect err ->
                  exitWithError err
          Error err ->
            exitWithError err
      Uri path ->
        comp
          bind statusLines <- cmd.lines `git status --porcelain`
          let 
            uncommitted? =
              array.find
                (\statusLine ->
                  case string.parts " " statusLine of
                    [statusType, statusPath] -> statusPath == path
                    _ -> false
                )
                statusLines
          case uncommitted? of
            Some _ ->
              println "warning: $path has uncommitted changes. Showing URIs for the most recently committed version.\n"
            None () ->
              io.pure ()
          
          bind objectHash <- io.map string.trim <| cmd.read `git rev-parse HEAD:$path`
          bind objectType <- readObjectType objectHash
          case objectType of
            "blob" ->
              println "git:blob:$objectHash"
            "tree" ->
              println "git:tree:$objectHash"
            _ ->
              println "internal error: unexpected object type $objectType"
          # cmd.eachline_ `git log --pretty=tformat:"%H %T"` (\line ->
          let format = "%H %T"
          cmd.eachline_ `git log --diff-filter=AM -n 1 --format=tformat:$format -- $path` (\line ->
            comp
              case string.parts " " line of
                [commitHash, treeHash] ->
                  comp
                    bind treeLines <- cmd.lines `git ls-tree $commitHash --full-tree -r -t --format "%(objectname) %(path)"`
                    let
                      objectPath? =
                        array.findMap
                        (\item -> case string.parts " " item.value of
                          [entryHash, entryPath] ->
                            if entryHash == objectHash
                              then Some { index = item.index, value = entryPath }
                              else None ()
                        )
                        (indexed treeLines)
                    case objectPath? of
                      Some { index, value } ->
                        println "git:commit:$commitHash/tree/$value"
                      None () ->
                        io.pure ()
                _ ->
                  comp
                    println "internal error: unexpected `git log` format"
                    exit.failure
            )
      Error { message, help } ->
        comp
          println "error: $message"
          println ""
          help # change
          exit.failure